#### Aims:
- Implementation of Vehicles API
	- serves as an endpoint to track vehicle inventory, performing CRUD operations
	- consume data from other APIs
	- implement a RESTful API for the Vehicles API
	- converting a Pricing Service API to microservice

#### Location Service Code(Boogle Maps)
- serves a Mock to simulate a Maps WebService
	- given a latitude and longitude, it will return a rondom address

- Classes
	- Address: made of private varibales address, city, state and zip. latittude and longitude come from the Vehicles API.
	- BoogleMapsApplication: lauches Boogle Maps as a Spring Boot application
	- MapsController: REST controller for the application. "GET" request will respond with a random addreses from repository.
	- MockAddressRepository: provide some type of data persistance while web service runs by choosing a random address from the ADDRESSES array defined in the file.

#### Pricing Service Code
- serve as a REST WebService to store and retrieve the price of a given vehicle. It should be converted to be a microservice registered through a Eureka server.
- Classes:
	- pricing: PricingServiceApplication launches thePricing Service as a Spring Boot Application
	- pricing.api:  PricingController is REST controller for the application
	- pricing.domain.price: 
		- Price: made of private variables currency, price and vehicled
		- PriceRepository: a type of data persistence, namely the ID ->  price pairing generated by the PricingService
	- pricing.service:
		- PriceException: that can be thrown when an issue arises in the PricingService
		- PricingService: creates a mapping of random prices to IDs, the method to generate the random price. 

#### Vehicles API
- serve as a REST API to maintain vehicle data and to provide a complete view of vehicle details including price and address
- vehicles: VehiclesApiApplication
	- lauches the Vehicles API as a Spring Boot application
	- initialize a few car manufacturers to place in the ManufacturerRepository
	- create web clients to connect to the Maps and Pricing services

- vehicles.api
	- API Error
	- CarController
	- CarResourceAssembler
	- ErrorController
- vehicles.client.maps
	- Address
	- MapsClient
- vehicles.client.prices
	- Price
	- PriceClient
- vehicles.domain
	- Condition
	- Location
- vehicles.domain.car
	- Car
	- CarRepository
	- Details
- vehicles.domain.manufacturer
	- Manufacturer
	- ManufacturerRepository
- vehicles.domain
	- CarNotFoundException
	- CarService
- test/../vehicles.api
	- CarControllerTest